#!/usr/bin/env sh


#
# Copyright (c) 2022. David W. Streever All Rights Reserved
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

# Resolve Symlinks of exe
if [[ "$OSTYPE" == "darwin"* ]]; then
  # Mac OSX
  RESOLVED_EXE_PATH=`readlink $0`
else
  # ...
  RESOLVED_EXE_PATH=`readlink -f $0`
fi

# Find Dir of resolved script
APP_DIR=$(dirname $RESOLVED_EXE_PATH)
CURR_DIR=$(pwd)

echo "APP_DIR: $APP_DIR"

DO_NOT_FILE="${APP_DIR}/DO_NOT_RUN_APP_FROM_HERE.txt"
if [ -f $DO_NOT_FILE ]; then
  echo "Do NOT run application from 'install' directory.  If properly installed, the application will be in your PATH";
  exit 1
fi

if [[ "${APP_DIR}" == "${HOME}/.hadoop-cli/bin" ]]; then
  echo "Running from User Local Instance"
else
  echo "Running Host instance"
fi

PRG_ARGS=
CMD_CP=

#!/bin/bash

# Minimum required Java version
MIN_JAVA_VERSION=17

# Function to extract major version number from java -version output
get_java_version() {
    local version_output=$($1 -version 2>&1)
    # Extract version number, handling both 1.8.0_xxx and 17.0.1+ formats
    local version=$(echo "$version_output" | head -n 1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+|[0-9]+' | head -n 1)
    # For 1.x style, return the minor version (e.g., 8 for 1.8.0); for 17+ style, return major number
    if [[ "$version" =~ ^1\.[0-9]+\.[0-9]+$ ]]; then
        echo "$version" | cut -d'.' -f2
    else
        # Take only the major version (before the first dot)
        echo "$version" | cut -d'.' -f1
    fi
}

# Function to check if version meets minimum requirement
check_version() {
    local version=$1
    if [ -z "$version" ]; then
        return 1
    fi
    # Use numeric comparison to properly handle versions
    if [ "$version" -ge "$MIN_JAVA_VERSION" ]; then
        return 0
    else
        return 1
    fi
}

# Determine which Java to use
if [ -n "$JAVA_HOME" ] && [ -x "$JAVA_HOME/bin/java" ]; then
    JAVA_CMD="$JAVA_HOME/bin/java"
    echo "Using JAVA_HOME: $JAVA_HOME"
else
    JAVA_CMD="java"
    echo "JAVA_HOME not set, using default system Java"
fi

# Check if Java is available
if ! command -v "$JAVA_CMD" &> /dev/null; then
    echo "Error: Java not found on system!"
    echo "Please install Java $MIN_JAVA_VERSION or higher and set JAVA_HOME or ensure it's in PATH"
    exit 1
fi

# Get Java version for comparison
JAVA_VERSION=$(get_java_version "$JAVA_CMD")
# Get full version string for display
FULL_VERSION=$("$JAVA_CMD" -version 2>&1 | head -n 1 | grep -oE '"[^"]+"')

echo "Detected Java version: $FULL_VERSION (major version: $JAVA_VERSION)"

# Check if version meets requirements
if ! check_version "$JAVA_VERSION"; then
    echo "Error: Java version $FULL_VERSION is too old!"
    echo "Please upgrade to Java $MIN_JAVA_VERSION or higher"
    exit 1
fi

AUX_LIBS_DIR=${HADOOP_CLI_AUX_LIBS:-${HOME}/.hadoop-cli/aux_libs}

SHOW_CP=
CMD_DIRECTIVE=
CMD_ARGS=
VERBOSE=
ENV_VAR_FILE=

HADOOP_CLASSPATH=false

APP_JAVA_OPTS=${JAVA_OPTS:-"-Xms2048m -Xmx4096m -XX:+UseG1GC"}

# Ultimately passed on to logback configuration
LOGGING_DIR=${LOGGING_DIR:-"${HOME}/.hadoop-cli/logs"}
LOGGING_THRESHOLD=${LOGGING_THRESHOLD:-"DEBUG"}
LOGGING_FILE_PREFIX=${LOGGING_FILE_PREFIX:-"hadoop-cli"}

if [[ -f ${HOME}/.hadoop-cli/env-var.props || -L ${HOME}/.hadoop-cli/env-var.props ]]; then
    ENV_VAR_FILE=${HOME}/.hadoop-cli/env-var.props
fi

if [[ ! -d ${HOME}/.hadoop-cli/aux_libs ]]; then
    mkdir -p ${HOME}/.hadoop-cli/aux_libs
fi

while [[ $# -gt 0 ]]; do
  case "$1" in
    -D*)
      APP_JAVA_OPTS="${APP_JAVA_OPTS} ${1}"
      shift
      ;;
    -i|--init)
      shift
      PRG_ARGS="${PRG_ARGS} -i \"${1}\""
      shift
      ;;
    -f|--file)
      shift
      PRG_ARGS="${PRG_ARGS} -f \"${1}\""
      shift
      ;;
    -d|--debug)
      shift
      PRG_ARGS="${PRG_ARGS} -d"
      ;;
    -t|--template)
      shift
      PRG_ARGS="${PRG_ARGS} -t \"${1}\""
      shift
      ;;
    -td|--template-delimiter)
      shift
      PRG_ARGS="${PRG_ARGS} -td \"${1}\""
      shift
      ;;
    -stdin)
      shift
      PRG_ARGS="${PRG_ARGS} -stdin"
      ;;
    -ef|--env-file)
      shift
      ENV_VAR_FILE=${1}
      ;;
    -h|--help)
      shift
      PRG_ARGS="${PRG_ARGS} -h"
      ;;
    --config)
      shift
      export HADOOP_CONF_DIR=$1
      shift
      ;;
    --aux-libs)
      shift
      export AUX_LIBS_DIR=$1
      shift
      ;;
    --hadoop-classpath)
      shift
      HADOOP_CLASSPATH="true"
      ;;
    --show-cp)
      shift
      SHOW_CP="true"
      ;;
    -s|--silent)
      shift
      PRG_ARGS="${PRG_ARGS} -s"
      ;;
    -v|--verbose)
      shift
      PRG_ARGS="${PRG_ARGS} -v"
      VERBOSE="true"
      ;;
    -e|--execute)
      shift
      PRG_ARGS="${PRG_ARGS} -e ${1}"
      shift
      ;;
    *)
      PRG_ARGS="${PRG_ARGS} $@"
      break;
  esac
done

if [[ "${ENV_VAR_FILE}x" != "x" ]]; then
    PRG_ARGS="${PRG_ARGS} -ef '${ENV_VAR_FILE}'"
fi

#echo "Program Args: ${PRG_ARGS}"
APP_JAVA_OPTS="${APP_JAVA_OPTS} -Dlogging.dir='${LOGGING_DIR}' -Dlogging.threshold=${LOGGING_THRESHOLD} -Dlogging.filename-prefix='${LOGGING_FILE_PREFIX}'"

#APP_JAVA_OPTS="${APP_JAVA_OPTS} -Dapp.path.dir=${HOME}/.hadoop-cli/logs -Dlogging.threshold=${LOGGING_THRESHOLD} -Dapp.log.file=\"$APP_LOG_FILE\""

if [[ ! -d ${AUX_LIBS_DIR} ]]; then
  mkdir -p ${AUX_LIBS_DIR}
fi

# Add aux_libs to classpath
CMD_CP=${AUX_LIBS_DIR}/*

if [[ "${HADOOP_CLASSPATH}x" == "truex" ]]; then
  echo "Picking up local Hadoop Classpath Libs."
  CMD_CP=${CMD_CP}:$(hadoop classpath)
fi

# Replace colon with comma in $CMD_CP so it can be used with Spring loader.path
CMD_CP=$(echo $CMD_CP | sed 's/:/,/g')

CLI_CMD=""

if [[ "${VERBOSE}x" != "x" ]]; then
    echo "Passing app Params: ${PRG_ARGS}"
fi


if [[ "${SHOW_CP}x" != "x" ]]; then
    echo "Classpath: ${CMD_CP}"
    echo "Program args: ${PRG_ARGS}"
fi

if [[ "${APP_JAVA_OPTS}x" != "x" ]]; then
    echo "Application JAVA_OPTS=${APP_JAVA_OPTS}"
fi

if [[ "${HADOOP_CLASSPATH}x" == "truex" ]]; then
  CLI_CMD="${JAVA_CMD} -Dloader.path=${CMD_CP} ${APP_JAVA_OPTS} -Dloader.main=com.cloudera.utils.hadoop.HadoopCliApp -Dloader.args=\"${PRG_ARGS}\" -jar ${APP_DIR}/../lib/*-thin.jar"
else
  CLI_CMD="${JAVA_CMD} -Dloader.path=${CMD_CP} ${APP_JAVA_OPTS} -Dloader.main=com.cloudera.utils.hadoop.HadoopCliApp -Dloader.args=\"${PRG_ARGS}\" -jar ${APP_DIR}/../lib/*-standalone.jar"
fi

echo "CLI_CMD: ${CLI_CMD}"

eval "${CLI_CMD}"
